{
  "entityType" : "RULE_CHAIN",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : null,
    "debugMode" : true,
    "externalId" : {
      "entityType" : "RULE_CHAIN",
      "id" : "c8cd57e0-e5fa-11ef-8b08-b1b78211b00c"
    },
    "firstRuleNodeId" : {
      "entityType" : "RULE_NODE",
      "id" : "822ba340-6783-11f0-8b08-b1b78211b00c"
    },
    "id" : {
      "entityType" : "RULE_CHAIN",
      "id" : "c8cd57e0-e5fa-11ef-8b08-b1b78211b00c"
    },
    "name" : "Data Transformation Rule Chain",
    "root" : false,
    "type" : "CORE"
  },
  "metaData" : {
    "connections" : [ {
      "fromIndex" : 0,
      "toIndex" : 4,
      "type" : "Success"
    }, {
      "fromIndex" : 0,
      "toIndex" : 9,
      "type" : "Success"
    }, {
      "fromIndex" : 1,
      "toIndex" : 7,
      "type" : "Success"
    }, {
      "fromIndex" : 2,
      "toIndex" : 4,
      "type" : "Success"
    }, {
      "fromIndex" : 2,
      "toIndex" : 8,
      "type" : "Failure"
    }, {
      "fromIndex" : 2,
      "toIndex" : 8,
      "type" : "Success"
    }, {
      "fromIndex" : 5,
      "toIndex" : 1,
      "type" : "Success"
    }, {
      "fromIndex" : 6,
      "toIndex" : 5,
      "type" : "Success"
    }, {
      "fromIndex" : 7,
      "toIndex" : 2,
      "type" : "Success"
    }, {
      "fromIndex" : 7,
      "toIndex" : 4,
      "type" : "Failure"
    }, {
      "fromIndex" : 8,
      "toIndex" : 3,
      "type" : "Failure"
    }, {
      "fromIndex" : 8,
      "toIndex" : 3,
      "type" : "Success"
    }, {
      "fromIndex" : 9,
      "toIndex" : 6,
      "type" : "Success"
    } ],
    "firstNodeIndex" : 0,
    "nodes" : [ {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 83,
        "layoutY" : 259
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "// Iterate over each key in the main message\nfor (var key in msg.values) {\n    if (msg.values.hasOwnProperty(key)) {\n        // Add main keys to flatData\n        msg[key] = msg.values[key];\n    }\n}\n\n// Return the flattened data along with metadata and msgType\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822ba340-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "De-Nesting Function",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 384,
        "layoutY" : 504
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "// Loop over all keys in msg that start with \"Fault\" (but skip keys that already are triggers)\r\nfor (var faultKey in msg) {\r\n    // Check if the key starts with \"Fault\" and is an object (and not a trigger key)\r\n    if (faultKey.startsWith(\"Fault\") && !faultKey.endsWith(\"Trigger\") && msg[faultKey] !== null && typeof msg[faultKey] === \"object\") {\r\n        var faultObj = msg[faultKey];\r\n        var trigger = null;\r\n        // Iterate over the properties of the fault object\r\n        for (var key in faultObj) {\r\n            if (typeof faultObj[key] === \"boolean\" && faultObj[key] === true) {\r\n                trigger = key;\r\n                break; \r\n            }\r\n        }\r\n        // If a true fault is found, add a new property with key \"<faultKey> Trigger\"\r\n        if (trigger !== null) {\r\n            msg[faultKey + \" Trigger\"] = trigger;\r\n        }\r\n    }\r\n}\r\n\r\n// Return the updated message with existing metadata and message type\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };\r\n",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822bca50-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Fault Trigger Identifier",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 653,
        "layoutY" : 386
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "// Get the current fault timestamp from the message.\r\nvar currentFaultTimestamp = msg[\"Fault1 Timestamp\"];\r\n\r\n// Retrieve the previously stored fault timestamp\r\nvar previousFaultTimestamp = metadata.ss_lastFaultTimestamp;\r\n\r\n// Check if we have a previous value and compare them.\r\nif (previousFaultTimestamp !== undefined && currentFaultTimestamp === previousFaultTimestamp) {\r\n    // The fault is a duplicate. Remove all keys that contain \"Fault\".\r\n    for (var key in msg) {\r\n        // Check if the key contains the substring \"Fault\"\r\n        if (key.indexOf(\"Fault\") !== -1) {\r\n            delete msg[key];\r\n        }\r\n    }\r\n} else {\r\n    // This is a new fault.\r\n    metadata.lastFaultTimestamp = currentFaultTimestamp;\r\n    metadata[\"lastFaultTimestamp\"] = currentFaultTimestamp;\r\n    delete metadata[\"ss_lastFaultTimestamp\"];\r\n}\r\n\r\n// Pass on the (possibly modified) message.\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822bf160-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Log Fault Once",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 923,
        "layoutY" : 410
      },
      "configuration" : {
        "scope" : "SERVER_SCOPE",
        "notifyDevice" : false,
        "sendAttributesUpdatedNotification" : false,
        "updateAttributesOnlyOnValueChange" : true
      },
      "configurationVersion" : 2,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c1870-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Last Fault Timestamp",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 688,
        "layoutY" : 85
      },
      "configuration" : {
        "version" : 0
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : false,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c3f80-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Data Transformation Output",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.flow.TbRuleChainOutputNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 208,
        "layoutY" : 598
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "var payload = msg;\r\nvar faultKeyPrefix = \"Fault\";\r\n\r\n// Use a for-in loop over the payload properties.\r\nfor (var key in payload) {\r\n    if (payload.hasOwnProperty(key) && key.substr(0, faultKeyPrefix.length) === faultKeyPrefix) {\r\n        var faultObj = payload[key];\r\n        if (faultObj && typeof faultObj === 'object' && faultObj.Timestamp) {\r\n            var timestamp = faultObj.Timestamp;\r\n            // Find the first space to separate time and date.\r\n            var spaceIndex = timestamp.indexOf(\" \");\r\n            if (spaceIndex > 0) {\r\n                var faultTime = timestamp.substring(0, spaceIndex);\r\n                var faultDateRaw = timestamp.substring(spaceIndex + 1);\r\n                \r\n                // Locate the slashes manually\r\n                var firstSlash = faultDateRaw.indexOf(\"/\");\r\n                var secondSlash = faultDateRaw.indexOf(\"/\", firstSlash + 1);\r\n                \r\n                var day = faultDateRaw.substring(0, firstSlash);\r\n                var month = faultDateRaw.substring(firstSlash + 1, secondSlash);\r\n                var year = faultDateRaw.substring(secondSlash + 1);\r\n                \r\n                // Pad day and month with a leading zero if needed.\r\n                if (day.length === 1) {\r\n                    day = \"0\" + day;\r\n                }\r\n                if (month.length === 1) {\r\n                    month = \"0\" + month;\r\n                }\r\n                var formattedDate = day + \"/\" + month + \"/\" + year;\r\n                payload[key + \" Date\"] = formattedDate;\r\n                \r\n                payload[key + \" Time\"] = faultTime;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nreturn { msg: payload, metadata: metadata, msgType: msgType };",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c3f81-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Create Fault Date and Fault Time",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 68,
        "layoutY" : 493
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "for (var key in msg) {\n    // Process only keys that start with \"Fault\", do not already contain a space, and are objects.\n    if (key.indexOf(\"Fault\") === 0 && key.indexOf(\" \") === -1 && typeof msg[key] === 'object') {\n        for (var faultKey in msg[key]) {\n            if (msg[key].hasOwnProperty(faultKey)) {\n                msg[key + ' ' + faultKey] = msg[key][faultKey];\n            }\n        }\n    }\n}\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c6690-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "De-nest Faults",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 326,
        "layoutY" : 374
      },
      "configuration" : {
        "tellFailureIfAbsent" : true,
        "fetchTo" : "METADATA",
        "clientAttributeNames" : [ ],
        "sharedAttributeNames" : [ ],
        "serverAttributeNames" : [ "lastFaultTimestamp" ],
        "latestTsKeyNames" : [ ],
        "getLatestValueWithTs" : false
      },
      "configurationVersion" : 1,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c8da0-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Get lastFaultTimestamp",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.metadata.TbGetAttributesNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 720,
        "layoutY" : 524
      },
      "configuration" : {
        "scriptLang" : "TBEL",
        "jsScript" : "return {msg: msg, metadata: metadata, msgType: msgType};",
        "tbelScript" : "return {\n    msg: metadata,\n    metadata: metadata,\n    msgType: \"POST_ATTRIBUTES_REQUEST\"\n};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822c8da1-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Convert msgType",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    }, {
      "additionalInfo" : {
        "description" : "",
        "layoutX" : 70,
        "layoutY" : 372
      },
      "configuration" : {
        "scriptLang" : "JS",
        "jsScript" : "if (metadata.deviceType == \"SLR140\") {\r\n    if (msg[\"DI-1\"] === 1) {\r\n        msg[\"Circuit Breaker\"] = true;\r\n    } else if (msg[\"DI-2\"] === 1) {\r\n        msg[\"Circuit Breaker\"] = false;\r\n    }\r\n} else if (metadata.deviceType == \"SLR140C\") {\r\n    if (msg[\"DI-5\"] === 1) {\r\n        msg[\"Circuit Breaker\"] = true;\r\n    } else if (msg[\"DI-6\"] === 1) {\r\n        msg[\"Circuit Breaker\"] = false;\r\n    }\r\n}\r\n\r\nreturn {\r\n    msg: msg,\r\n    metadata: metadata,\r\n    msgType: msgType\r\n};",
        "tbelScript" : "return {msg: msg, metadata: metadata, msgType: msgType};"
      },
      "configurationVersion" : 0,
      "createdTime" : 0,
      "debugMode" : true,
      "externalId" : null,
      "id" : {
        "entityType" : "RULE_NODE",
        "id" : "822cb4b0-6783-11f0-8b08-b1b78211b00c"
      },
      "name" : "Circuit Breaker Key",
      "queueName" : null,
      "ruleChainId" : null,
      "singletonMode" : false,
      "type" : "org.thingsboard.rule.engine.transform.TbTransformMsgNode"
    } ],
    "ruleChainConnections" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}