{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : [ {
      "customerId" : {
        "entityType" : "CUSTOMER",
        "id" : "4e4e50c0-9c65-11ef-8b08-b1b78211b00c"
      },
      "title" : "Demo",
      "public" : false
    }, {
      "customerId" : {
        "entityType" : "CUSTOMER",
        "id" : "4c7e7e40-a201-11ef-8b08-b1b78211b00c"
      },
      "title" : "Stelmec",
      "public" : false
    } ],
    "configuration" : {
      "description" : "",
      "widgets" : {
        "7d56956f-439b-586d-ad6f-047719ae1386" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class=\"card\">\n    <table id=\"myTable\">\n        <thead>\n            <tr>\n                <th>Panel no.</th>\n                <th>Relay_SLR140</th>\n                <th>Relay_SLR140C</th>\n                <th>Meter Dashboard</th>\n            </tr>\n        </thead>\n        <tbody id = \"tbody1\"></tbody>\n    </table>\n</div>\n\n<script>\n    var api_url = \"http://18.117.24.244:8080\";\n    var globalHeaders = {\n        \"Content-Type\": \"application/json\"\n    };\n    var panels1 = [];\n    // Mapping of dashboard IDs for each device type\n    var dashboardId = {\n        \"Relay_SLR140\": \"56ce32a0-9c52-11ef-8b08-b1b78211b00c\",\n        \"Relay_SLR140C\": \"dbe171c0-9c4b-11ef-8b08-b1b78211b00c\",\n        \"Meter_Dashboard\": \"53b71520-9c32-11ef-8b08-b1b78211b00c\"\n    };\n    // Function to retrieve JWT token from ThingsBoard API\n    async function getJwtToken() {\n        try {\n            const response = await fetch(`${api_url}/api/auth/login`, {\n                method: \"POST\",\n                headers: globalHeaders,\n                body: JSON.stringify({\n                    username: \"admin@meshnetelectronics.com\",\n                    password: \"Interns@321\"\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            const data = await response.json();\n            globalHeaders[\"X-Authorization\"] = \"Bearer \" + data.token; \n            return data.token;\n        } catch (error) {\n            console.error(\"Error fetching JWT token:\", error);\n        }\n    }\n    \n    // Generic function to fetch devices by device profile ID\n    async function getDevicesByProfile(profileId) {\n        try {\n            const response = await fetch(`${api_url}/api/tenant/devices?pageSize=100&page=0&sortProperty=createdTime&sortOrder=ASC`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!response.ok) {\n                throw new Error(\"Error fetching devices for profile \" + profileId);\n            }\n            const data = await response.json();\n            // Filter the devices based on deviceProfileId.id.\n            const filteredDevices = (data.data || []).filter(device => \n                device.deviceProfileId && device.deviceProfileId.id === profileId\n            );\n            return filteredDevices;\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    \n    // New function to dynamically fetch device profile IDs\n    async function getDeviceProfileIds() {\n        try {\n            const response = await fetch(`${api_url}/api/deviceProfiles?pageSize=100&page=0`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch device profiles\");\n            }\n            const data = await response.json();\n            let profiles = data.data || [];\n            let profileIds = {};\n            profiles.forEach(profile => {\n                if (profile.name === \"SLR140\") {\n                    profileIds.relay1 = profile.id.id;\n                }\n                if (profile.name === \"SLR140C\") {\n                    profileIds.relay2 = profile.id.id;\n                }\n                if (profile.name === \"3 Phase Meter\") {\n                    profileIds.meter = profile.id.id;\n                }\n            });\n            return profileIds;\n        } catch (error) {\n            console.error(\"Error fetching device profiles:\", error);\n            return {};\n        }\n    }\n    \n    // Function to group devices into panels1\n    async function createPanels1() {\n        // Fetch dynamic device profile IDs\n        const profileIds = await getDeviceProfileIds();\n        if (!profileIds.relay1 || !profileIds.relay2 || !profileIds.meter) {\n            console.error(\"One or more required device profiles were not found.\");\n            return;\n        }\n        // Replace these profile IDs with your actual device profile IDs\n         // Use the dynamically fetched profile IDs\n        const relay1ProfileId = profileIds.relay1;\n        const relay2ProfileId = profileIds.relay2;\n        const meterProfileId  = profileIds.meter;\n        \n        // Fetch devices concurrently\n        const [relay1Devices, relay2Devices, meterDevices] = await Promise.all([\n            getDevicesByProfile(relay1ProfileId),\n            getDevicesByProfile(relay2ProfileId),\n            getDevicesByProfile(meterProfileId)\n        ]);\n\n        // Determine how many complete panels1 you can form\n        const panelCount = Math.min(relay1Devices.length, relay2Devices.length, meterDevices.length);\n        \n        // Display only first 5 panels\n        if (panelCount <= 5){\n            displayCount = panelCount;\n        }\n        else{\n            displayCount = 5;\n        }\n        \n        for (let i = 0; i < displayCount; i++) {\n            panels1.push({\n                relay1Id: relay1Devices[i].id.id,\n                relay1Name: relay1Devices[i].name,\n                relay2Id: relay2Devices[i].id.id,\n                relay2Name: relay2Devices[i].name,\n                meterId: meterDevices[i].id.id,\n                meterName: meterDevices[i].name\n            });\n        }\n    }\n\n    // Function to render the panels1 dynamically into the table and store them in an array\n    async function renderPanels1() {\n        const token = await getJwtToken();\n        if (!token) {\n            console.error(\"Cannot render panels1 without a valid JWT token.\");\n            return;\n        }\n        await createPanels1();\n\n        const tableBody = document.getElementById(\"tbody1\");\n        tableBody.innerHTML = \"\";  // clear any existing rows\n\n        panels1.forEach((panel, index) => {\n            const row = document.createElement(\"tr\");\n            row.innerHTML = `<td>${index + 1}</td>\n                <td><button onclick=\"openDashboard1('Relay_SLR140',${index})\">${panel.relay1Name}</button></td>\n                <td><button onclick=\"openDashboard1('Relay_SLR140C',${index})\">${panel.relay2Name}</button></td>\n                <td><button onclick=\"openDashboard1('Meter_Dashboard',${index})\">${panel.meterName}</button></td>`;\n            tableBody.appendChild(row);\n        });\n    }\n\n    // Modified openDashboard1 function\n    async function openDashboard1(deviceName, panelIndex) {\n        // Determine which device id to use based on the deviceName and the panel's index.\n        let deviceId;\n        if (deviceName === \"Relay_SLR140\") {\n            deviceId = panels1[panelIndex].relay1Id;\n        } else if (deviceName === \"Relay_SLR140C\") {\n            deviceId = panels1[panelIndex].relay2Id;\n        } else if (deviceName === \"Meter_Dashboard\") {\n            deviceId = panels1[panelIndex].meterId;\n        } else {\n            console.error(\"Unknown device type:\", deviceName);\n            return;\n        }\n        \n        // Get the dashboard id from the mapping.\n        const dashId = dashboardId[deviceName];\n    \n        try {\n            // Fetch the current dashboard JSON\n            const getResp = await fetch(`${api_url}/api/dashboard/${dashId}`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!getResp.ok) {\n                throw new Error(\"Failed to fetch dashboard JSON\");\n            }\n            let dashJson = await getResp.json();\n    \n            // Update the dashboard JSON: change the device id in the entity alias that matches the deviceName.\n                if (dashJson.configuration.entityAliases) {\n                    for (const key in dashJson.configuration.entityAliases) {\n                        const aliasObj = dashJson.configuration.entityAliases[key];\n                        // Check if this alias has a filter and a singleEntity property\n                        if (aliasObj.filter && aliasObj.filter.singleEntity) {\n                            // Update its id to the desired device id\n                            aliasObj.filter.singleEntity.id = deviceId;\n                        }\n                    }\n                } else {\n                    console.error(\"No entityAliases found in dashboard JSON\");\n                }\n    \n            // Now update the dashboard on the server via a POST request.\n            const updateResp = await fetch(`${api_url}/api/dashboard`, {\n                method: \"POST\",\n                headers: globalHeaders,\n                body: JSON.stringify(dashJson)\n            });\n            if (!updateResp.ok) {\n                throw new Error(\"Failed to update dashboard\");\n            }\n    \n            // Finally, open the dashboard in a new window.\n            let dashboardUrl = `${api_url}/dashboards/${dashId}`;\n            window.open(dashboardUrl, \"_blank\");\n        } catch (error) {\n            console.error(\"Error in openDashboard1:\", error);\n        }\n    }\n    \n    renderPanels1();\n</script>",
              "cardCss" : ".card {\n            width: 100%;\n            max-width: 600px;\n            height: auto;\n            max-height: 400px;\n            margin: auto;\n            padding: 10px;\n            overflow: auto;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid black;\n            text-align: center;\n            padding: 10px;\n        }\n        button {\n            padding: 5px 10px;\n            font-size: 14px;\n            cursor: pointer;\n        }"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "7d56956f-439b-586d-ad6f-047719ae1386"
        },
        "8304b4d5-1c9a-e0da-f6ea-bed3e61cdbd5" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Display Image</title>\r\n</head>\r\n<body>\r\n    <div class=\"image-container\">\r\n        <img src=\"https://stelmec.com/wp-content/uploads/2023/02/Stelmec-WHITE-LOGO-01-2.svg\" alt=\"Stelmec Logo\">\r\n    </div>\r\n</body>\r\n</html>\r\n",
              "cardCss" : "body {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n    margin: 0;\r\n    background-color: #f5f5f5;\r\n}\r\n\r\n.image-container {\r\n    background: #305680;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\nimg {\r\n    width: 200px;\r\n    height: 120px;\r\n}\r\n"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "8304b4d5-1c9a-e0da-f6ea-bed3e61cdbd5"
        },
        "7a8b0428-c778-45d0-1766-20c0d0d646dc" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class='card'>Stelmec Substation Automation System</div>",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 36px;\n    color: #305680;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "7a8b0428-c778-45d0-1766-20c0d0d646dc"
        },
        "4d5c591a-213b-3b10-63eb-ba5104ad9b6f" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class=\"card\">\n    <table id=\"myTable\">\n        <thead>\n            <tr>\n                <th>Panel no.</th>\n                <th>Relay_SLR140</th>\n                <th>Relay_SLR140C</th>\n                <th>Meter Dashboard</th>\n            </tr>\n        </thead>\n        <tbody id = \"tbody2\"></tbody>\n    </table>\n</div>\n\n<script>\n    var api_url = \"http://18.117.24.244:8080\";\n    var globalHeaders = {\n        \"Content-Type\": \"application/json\"\n    };\n    var panels2 = [];\n    // Mapping of dashboard IDs for each device type\n    var dashboardId = {\n        \"Relay_SLR140\": \"56ce32a0-9c52-11ef-8b08-b1b78211b00c\",\n        \"Relay_SLR140C\": \"dbe171c0-9c4b-11ef-8b08-b1b78211b00c\",\n        \"Meter_Dashboard\": \"53b71520-9c32-11ef-8b08-b1b78211b00c\"\n    };\n    // Function to retrieve JWT token from ThingsBoard API\n    async function getJwtToken() {\n        try {\n            const response = await fetch(`${api_url}/api/auth/login`, {\n                method: \"POST\",\n                headers: globalHeaders,\n                body: JSON.stringify({\n                    username: \"admin@meshnetelectronics.com\",\n                    password: \"Interns@321\"\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            const data = await response.json();\n            globalHeaders[\"X-Authorization\"] = \"Bearer \" + data.token; \n            return data.token;\n        } catch (error) {\n            console.error(\"Error fetching JWT token:\", error);\n        }\n    }\n    \n    // Generic function to fetch devices by device profile ID\n    async function getDevicesByProfile(profileId) {\n        try {\n            const response = await fetch(`${api_url}/api/tenant/devices?pageSize=100&page=0&sortProperty=createdTime&sortOrder=ASC`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!response.ok) {\n                throw new Error(\"Error fetching devices for profile \" + profileId);\n            }\n            const data = await response.json();\n            // Filter the devices based on deviceProfileId.id.\n            const filteredDevices = (data.data || []).filter(device => \n                device.deviceProfileId && device.deviceProfileId.id === profileId\n            );\n            return filteredDevices;\n        } catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    \n    // New function to dynamically fetch device profile IDs\n    async function getDeviceProfileIds() {\n        try {\n            const response = await fetch(`${api_url}/api/deviceProfiles?pageSize=100&page=0`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch device profiles\");\n            }\n            const data = await response.json();\n            let profiles = data.data || [];\n            let profileIds = {};\n            profiles.forEach(profile => {\n                if (profile.name === \"SLR140\") {\n                    profileIds.relay1 = profile.id.id;\n                }\n                if (profile.name === \"SLR140C\") {\n                    profileIds.relay2 = profile.id.id;\n                }\n                if (profile.name === \"3 Phase Meter\") {\n                    profileIds.meter = profile.id.id;\n                }\n            });\n            return profileIds;\n        } catch (error) {\n            console.error(\"Error fetching device profiles:\", error);\n            return {};\n        }\n    }\n    \n    // Function to group devices into panels2\n    async function createPanels2() {\n        // Fetch dynamic device profile IDs\n        const profileIds = await getDeviceProfileIds();\n        if (!profileIds.relay1 || !profileIds.relay2 || !profileIds.meter) {\n            console.error(\"One or more required device profiles were not found.\");\n            return;\n        }\n        // Use the dynamically fetched profile IDs\n        const relay1ProfileId = profileIds.relay1;\n        const relay2ProfileId = profileIds.relay2;\n        const meterProfileId  = profileIds.meter;\n\n        // Fetch devices concurrently\n        const [relay1Devices, relay2Devices, meterDevices] = await Promise.all([\n            getDevicesByProfile(relay1ProfileId),\n            getDevicesByProfile(relay2ProfileId),\n            getDevicesByProfile(meterProfileId)\n        ]);\n\n        // Determine how many complete panels2 you can form\n        const panelCount = Math.min(relay1Devices.length, relay2Devices.length, meterDevices.length);\n\n        // Display next 5 panels\n        if (panelCount > 5 &&panelCount <= 10){\n            displayCount = panelCount;\n        }\n        else{\n            displayCount = 10;\n        }\n        \n        for (let i = 5; i < displayCount; i++) {\n            panels2.push({\n                relay1Id: relay1Devices[i].id.id,\n                relay1Name: relay1Devices[i].name,\n                relay2Id: relay2Devices[i].id.id,\n                relay2Name: relay2Devices[i].name,\n                meterId: meterDevices[i].id.id,\n                meterName: meterDevices[i].name\n            });\n        }\n    }\n\n    // Function to render the panels2 dynamically into the table and store them in an array\n    async function renderPanels2() {\n        const token = await getJwtToken();\n        if (!token) {\n            console.error(\"Cannot render panels2 without a valid JWT token.\");\n            return;\n        }\n        await createPanels2();\n\n        const tableBody = document.getElementById(\"tbody2\");\n        tableBody.innerHTML = \"\";  // clear any existing rows\n\n        panels2.forEach((panel, index) => {\n            const row = document.createElement(\"tr\");\n            row.innerHTML = `<td>${index + 6}</td>\n                <td><button onclick=\"openDashboard2('Relay_SLR140',${index})\">${panel.relay1Name}</button></td>\n                <td><button onclick=\"openDashboard2('Relay_SLR140C',${index})\">${panel.relay2Name}</button></td>\n                <td><button onclick=\"openDashboard2('Meter_Dashboard',${index})\">${panel.meterName}</button></td>`;\n            tableBody.appendChild(row);\n        });\n    }\n\n    // Modified openDashboard2 function\n    async function openDashboard2(deviceName, panelIndex) {\n        // Determine which device id to use based on the deviceName and the panel's index.\n        let deviceId;\n        if (deviceName === \"Relay_SLR140\") {\n            deviceId = panels2[panelIndex].relay1Id;\n        } else if (deviceName === \"Relay_SLR140C\") {\n            deviceId = panels2[panelIndex].relay2Id;\n        } else if (deviceName === \"Meter_Dashboard\") {\n            deviceId = panels2[panelIndex].meterId;\n        } else {\n            console.error(\"Unknown device type:\", deviceName);\n            return;\n        }\n    \n        // Get the dashboard id from the mapping.\n        const dashId = dashboardId[deviceName];\n    \n        try {\n            // Fetch the current dashboard JSON\n            const getResp = await fetch(`${api_url}/api/dashboard/${dashId}`, {\n                method: \"GET\",\n                headers: globalHeaders\n            });\n            if (!getResp.ok) {\n                throw new Error(\"Failed to fetch dashboard JSON\");\n            }\n            let dashJson = await getResp.json();\n    \n            // Update the dashboard JSON: change the device id in the entity alias that matches the deviceName.\n                if (dashJson.configuration.entityAliases) {\n                    for (const key in dashJson.configuration.entityAliases) {\n                        const aliasObj = dashJson.configuration.entityAliases[key];\n                        // Check if this alias has a filter and a singleEntity property\n                        if (aliasObj.filter && aliasObj.filter.singleEntity) {\n                            // Update its id to the desired device id\n                            aliasObj.filter.singleEntity.id = deviceId;\n                        }\n                    }\n                } else {\n                    console.error(\"No entityAliases found in dashboard JSON\");\n                }\n    \n            // Now update the dashboard on the server via a POST request.\n            const updateResp = await fetch(`${api_url}/api/dashboard`, {\n                method: \"POST\",\n                headers: globalHeaders,\n                body: JSON.stringify(dashJson)\n            });\n            if (!updateResp.ok) {\n                throw new Error(\"Failed to update dashboard\");\n            }\n    \n            // Finally, open the dashboard in a new window.\n            let dashboardUrl = `${api_url}/dashboards/${dashId}`;\n            window.open(dashboardUrl, \"_blank\");\n        } catch (error) {\n            console.error(\"Error in openDashboard2:\", error);\n        }\n    }\n\n    renderPanels2();\n</script>",
              "cardCss" : ".card {\n            width: 100%;\n            max-width: 600px;\n            height: auto;\n            max-height: 400px;\n            margin: auto;\n            padding: 10px;\n            overflow: auto;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid black;\n            text-align: center;\n            padding: 10px;\n        }\n        button {\n            padding: 5px 10px;\n            font-size: 14px;\n            cursor: pointer;\n        }"
            },
            "title" : "HTML Card",
            "dropShadow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "4d5c591a-213b-3b10-63eb-ba5104ad9b6f"
        }
      },
      "states" : {
        "default" : {
          "name" : "Panel Dashboard",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "7d56956f-439b-586d-ad6f-047719ae1386" : {
                  "sizeX" : 14,
                  "sizeY" : 10,
                  "row" : 3,
                  "col" : 0
                },
                "8304b4d5-1c9a-e0da-f6ea-bed3e61cdbd5" : {
                  "sizeX" : 8,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 20
                },
                "7a8b0428-c778-45d0-1766-20c0d0d646dc" : {
                  "sizeX" : 20,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                },
                "4d5c591a-213b-3b10-63eb-ba5104ad9b6f" : {
                  "sizeX" : 14,
                  "sizeY" : 10,
                  "row" : 3,
                  "col" : 14
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : { },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1738684015155,
            "endTimeMs" : 1738770415155
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "90f25560-e3d3-11ef-8b08-b1b78211b00c"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Panel Dashboard",
    "title" : "Panel Dashboard"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}